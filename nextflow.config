// Global parameters
params {
    refDir = "/home/ubuntu/data/PRRS/ref"
    reads = "/home/ubuntu/data/PRRS/*_R{1,2}.fq.gz"
    adapters = "/home/ubuntu/data/PRRS/adapters/adapters.fasta"
    primers = "/home/ubuntu/data/PRRS/primers/primers.fasta"
    outdir = "/home/ubuntu/data/PRRS/results"
    nextstrain_config = "/path/to/nextstrain_config.yaml"
    
    references = [
        "${params.refDir}/prrsV1.fasta",
        "${params.refDir}/prrsV2.fasta"
    ]
    
    // ORF coordinates for different PRRS versions
    orf_coordinates = [
        "prrsV1": [
            "ORF5": "13494-14099",
            "ORF7": "14598-14984"
        ],
        "prrsV2": [
            "ORF5": "13788-14390", 
            "ORF7": "14889-15260"
        ]
    ]
}

// Process configurations
process {
    withName: TRIMMOMATIC {
        conda = "bioconda::trimmomatic=0.39"
        cpus = 4
        memory = '8 GB'
        publishDir = [
            path: "${params.outdir}/trimmed",
            mode: 'copy',
            pattern: '*_trimmed.fastq.gz'
        ]
    }
	
	docker {
    enabled = true
    runOptions = '-u $(id -u):$(id -g)'
}

    withName: SPADES_ASSEMBLY_RESCUE {
        conda = "bioconda::spades=3.15.5 conda-forge::setuptools"
        cpus = 8
        memory = '32 GB'
        time = '6h'
        publishDir = [
            path: "${params.outdir}/rescue_assemblies",
            mode: 'copy',
            pattern: '*_rescue_assembly/*'
        ]
    }

    withName: EXTRACT_ORF_FROM_ASSEMBLY {
        conda = "bioconda::blast=2.12.0 bioconda::seqtk=1.3"
        cpus = 4
        memory = '8 GB'
        publishDir = [
            path: "${params.outdir}/extracted_orfs",
            mode: 'copy',
            pattern: '*_ORF*.fasta'
        ]
    }
    
    withName: BWA_INDEX {
        conda = "bioconda::bwa=0.7.17"
        cpus = 4
        memory = '8 GB'
        publishDir = [
            path: "${params.outdir}/bwa_index",
            mode: 'copy',
            pattern: '*.{amb,ann,bwt,pac,sa}'
        ]
    }
    
    withName: BWA_MEM {
        conda = "bioconda::bwa=0.7.17 bioconda::samtools=1.15"
        cpus = 4
        memory = '16 GB'
    }

    withName: INDEX_BAM {
        conda = "bioconda::samtools=1.15"
        cpus = 4
        memory = '8 GB'
        publishDir = [
            path: "${params.outdir}/alignments",
            mode: 'copy',
            pattern: '*.{bam,bai}'
        ]
    }

    withName: DOWNSAMPLE_BAM {
        conda = "bioconda::samtools=1.15"
        cpus = 2
        memory = '4 GB'
        publishDir = [
            path: "${params.outdir}/downsampled_bams",
            mode: 'copy',
            pattern: '*_downsampled.bam*'
        ]
    }
	
    withName: COLLECT_MAPPING_STATS {
        conda = "bioconda::samtools=1.15"
        cpus = 2
        memory = '4 GB'
        publishDir = [
            path: "${params.outdir}/mapping_stats",
            mode: 'copy',
            pattern: '*_mapping_stats.txt'
        ]
    }

    withName: CREATE_CONSENSUS {
        conda = "bioconda::samtools=1.15 bioconda::bcftools=1.15 bioconda::htslib=1.15"
        cpus = 4
        memory = '8 GB'
        publishDir = [
            path: "${params.outdir}/consensus",
            mode: 'copy',
            pattern: '*_{consensus.fasta,variants.vcf.gz}'
        ]
    }

    withName: NEXTSTRAIN_PHYLOGENY {
        conda = "bioconda::nextstrain-cli=3.2.1 bioconda::nextclade=2.14.0"
        cpus = 8
        memory = '16 GB'
        publishDir = [
            path: "${params.outdir}/nextstrain",
            mode: 'copy',
            pattern: 'results/*'
        ]
    }
}

// Conda configuration
conda {
    enabled = true
    channels = ['conda-forge', 'bioconda', 'defaults']
}

// Wave configuration
wave {
    enabled = false
    freeze = true
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

// Capture Nextflow log files
timeline {
    enabled = true
    file = "${params.outdir}/pipeline_info/execution_timeline.html"
}
report {
    enabled = true
    file = "${params.outdir}/pipeline_info/execution_report.html"
}
trace {
    enabled = false
    file = "${params.outdir}/pipeline_info/execution_trace.txt"
}
dag {
    enabled = false
    file = "${params.outdir}/pipeline_info/pipeline_dag.svg"
}
